// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId], name: "userId")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId], name: "userId")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   credits       Int       @default(10)

//   accounts Account[]
//   sessions Session[]
// }

// // course contains many units
// model Course {
//   id    String @id @default(cuid())
//   name  String
//   image String
//   units Unit[]
// }

// // unit contains many chapters
// model Unit {
//   id       String @id @default(cuid())
//   courseId String

//   name     String
//   course   Course    @relation(fields: [courseId], references: [id])
//   chapters Chapter[]

//   @@index([courseId], name: "courseId")
// }

// model Chapter {
//   id     String @id @default(cuid())
//   unitId String

//   name               String
//   youtubeSearchQuery String
//   videoId            String?
//   summary            String?    @db.VarChar(3000)
//   unit               Unit       @relation(fields: [unitId], references: [id])
//   questions          Question[]

//   @@index([unitId], name: "unitId")
// }

// model Question {
//   id        String @id @default(cuid())
//   chapterId String

//   question String  @db.VarChar(3000)
//   answer   String  @db.VarChar(3000)
//   options  String  @db.VarChar(3000)
//   chapter  Chapter @relation(fields: [chapterId], references: [id])

//   @@index([chapterId], name: "chapterId")
// }

// model UserSubscription {
//   id                     String    @id @default(cuid())
//   userId                 String    @unique
//   stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
//   stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
//   stripePriceId          String?   @map(name: "stripe_price_id")
//   stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId_idx")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId_idx")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)
  doubts        Doubt[]
  answers       Answer[] 

  accounts Account[]
  sessions Session[]
}

model Course {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String
  units Unit[]
}

model Unit {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId_idx")
}

model Chapter {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  unitId String @db.ObjectId

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]
  doubts    Doubt[] 

  @@index([unitId], name: "unitId_idx")
}

model Question {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String @db.ObjectId

  question String
  answer   String
  options  String
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId_idx")
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique @db.ObjectId
  stripeCustomerId       String    @unique
  stripeSubscriptionId   String?
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}

model Doubt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  chapterId   String?  @db.ObjectId
  question    String
  description String
  isOwner     Boolean
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter     Chapter? @relation(fields: [chapterId], references: [id])
  answers     Answer[] @relation("DoubtAnswers")

  @@index([userId], name: "userId_idx")
  @@index([chapterId], name: "chapterId_idx")
}


model Answer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doubtId   String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doubt     Doubt    @relation("DoubtAnswers", fields: [doubtId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([doubtId], name: "doubtId_idx")
  @@index([userId], name: "userId_idx")
}